plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'application'
}

group = 'me.qq185'
version = '1.0-SNAPSHOT'
ext.kotlin_version = '1.6.10'
ext.junit_version = '1.8.2'
ext.junit5_version = '5.8.2'
ext.spek_version = '1.1.5'

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5_version"
    testImplementation "org.jetbrains.spek:spek-api:$spek_version"
    testImplementation "org.hamcrest:hamcrest-all:1.3"
    testImplementation 'org.mockito:mockito-core:4.2.0'
    testImplementation 'com.nhaarman:mockito-kotlin-kt1.1:1.6.0'

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5_version"
    testRuntimeOnly "org.jetbrains.spek:spek-junit-platform-engine:$spek_version"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junit_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "com.github.inamik.text.tables:inamik-text-tables:1.0-SNAPSHOT"
    implementation 'org.apache.commons:commons-csv:1.8'
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

application {
    mainClassName = 'MainKt'
}

task enabledMockingFinalClasses doLast {
    {
        def mockMakerFile = new File("$projectDir/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker")
        mockMakerFile.parentFile.mkdirs()
        mockMakerFile.createNewFile()
        mockMakerFile.write("mock-maker-inline")
    }
}

jar {

    task updateProjectVersion {
        def versionFile = new File("$projectDir/src/main/resources/version.properties")
        versionFile.parentFile.mkdirs()
        versionFile.createNewFile()
        versionFile.write("application.version=${version}")
    }

    manifest {
        attributes 'Main-Class': 'main.MainKt'
    }

    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}
